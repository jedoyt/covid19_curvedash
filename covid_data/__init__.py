import pandas as pd
import plotly.graph_objects as go

class CountryCovidData:
    '''
    Generates country data that can be used for visualization.
    The source of data is from Kaggle: https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset
    Exact csv file use is 'covid_19_data.csv'
    This class contains two methods:
    1.  get_dict - returns a dictionary of cumulative counts
        of the following for a given country:
         Confirmed Cases
         Deaths
         Recovered
    2. __latest_summary__ - prints the latest summary statistics of a given country
    '''
    def __init__(self,covid_df, country, x_dates):
        self.covid = covid_df
        self.country = country
        self.x_dates = x_dates

    def get_dict(self):
        '''
        Generates lineplot of cumulative counts of
        confirmed cases, deaths, and recoveries on COVID-19 patients
        country - str, Country/Region
        x_dates - list, array, or pandas series: Observation Dates
        '''

        # Filter data per country
        filter_country = self.covid['Country/Region'] == self.country
        covid_country = self.covid[filter_country].copy()

        # Dictionary of daily data
        confirmed_dict = dict()
        deaths_dict = dict()
        recovered_dict = dict()

        for date in self.x_dates:
            # filter dataframe by date
            filter_country_date = covid_country['ObservationDate'] == date
            covid_country_date = covid_country[filter_country_date].copy()
            short_date = date[:5]

            # Assign data to dictionary key: Confirmed
            confirmed_dict[short_date] = int(covid_country_date['Confirmed'].sum())

            # Assign data to dictionary key: Deaths
            deaths_dict[short_date] = int(covid_country_date['Deaths'].sum())

            # Assign data to dictionary key: Recovered
            recovered_dict[short_date] = int(covid_country_date['Recovered'].sum())

        return {'confirmed':confirmed_dict,
                'deaths':deaths_dict,
                'recovered':recovered_dict}

    def get_latest_summary(self, data_dict):
        '''
        Prints out and returns a dictionary of the latest summary statistics.
        Takes in only one argument
        data_dict - dict, This dictionary is an instance of CountryCovidData.get_dict() method.
        returns a dictionary having this format:
            {'country': "Philippines",
             'date': '04/01/2020',
             'confirmed': 2311,
             'deaths': 96,
             'death_rate': '4.15%',
             'recovered': 50,
             'recovery_rate': '2.16%'
             }
        '''
        
        self.data_dict = data_dict

        # Latest Summary Statistics
        print("\nNovel Corona Virus 2019 Dataset: Day level information on covid-19 affected cases")
        print("Cumulative Data as of", self.covid['ObservationDate'].iloc[-1],"from",self.country)

        latest_date = list(self.data_dict['confirmed'].keys())[-1]

        print("Confirmed Cases:", self.data_dict['confirmed'][latest_date])
        print("Death Toll:", self.data_dict['deaths'][latest_date], ", ", 
                            round(self.data_dict['deaths'][latest_date] / self.data_dict['confirmed'][latest_date],4)*100,"% of Confirmed Cases")
        print("Recovered:", self.data_dict['recovered'][latest_date], ", ", 
                            round(self.data_dict['recovered'][latest_date] / self.data_dict['confirmed'][latest_date],4)*100,"% of Confirmed Cases\n")

        return {'country': self.country,
                'date': self.covid['ObservationDate'].iloc[-1],
                'confirmed': self.data_dict['confirmed'][latest_date],
                'deaths': self.data_dict['deaths'][latest_date],
                'death_rate': str(round(self.data_dict['deaths'][latest_date] / self.data_dict['confirmed'][latest_date],4)*100) + '%',
                'recovered': self.data_dict['recovered'][latest_date],
                'recovery_rate': str(round(self.data_dict['recovered'][latest_date] / self.data_dict['confirmed'][latest_date],4)*100) + '%'
                }

    def make_go_figure(self, data_dict):
        '''
        Generates an instance of a plotly graph using the dictionary
        generated by the .get_dict() method of CountryCovidData class.
        Takes in only one argument
        data_dict - dict, This dictionary is an instance of CountryCovidData.get_dict() method.
        
        returns a plotly_graph_obj.Figure() object which is a line plot
        '''
        self.data_dict = data_dict

        # Plotly Visualization
        confirmed_trace = go.Scatter(x=list(self.data_dict['confirmed'].keys()),
                                    y=list(self.data_dict['confirmed'].values()),
                                    mode='lines', name='Confirmed'
                                    )
        deaths_trace = go.Scatter(x=list(self.data_dict['confirmed'].keys()),
                                y=list(self.data_dict['deaths'].values()),
                                mode='lines', name='Deaths'
                                )
        recovered_trace = go.Scatter(x=list(self.data_dict['confirmed'].keys()),
                                    y=list(self.data_dict['recovered'].values()),
                                    mode='lines', name='Recovered'
                                    )

        data = [confirmed_trace, deaths_trace, recovered_trace]

        layout = go.Layout(title = f"Cumulative Counts from {self.country}",
                           xaxis = dict(title='Observation Dates'),
                           yaxis = dict(title='Cumulative Counts'),
                           hovermode= 'closest'
                           )

        return go.Figure(data=data, layout=layout)

###### ADDITIONAL METHODS FOR BUBBLE PLOT ######
import random
from datetime import datetime

def load_bubbleplot_df():
    # DATA PREPARATIONS
    filepath = 'covid_data/novel-corona-virus-2019-dataset/revised_covid_19_data.csv'
    df = pd.read_csv(filepath, index_col=0,parse_dates=['date'])

    df['country'] = df['country'].replace(' Azerbaijan', 'Azerbaijan') # minor country correction

    # Final revisions
    df.sort_values(by=['country','date'],inplace=True)
    df.reset_index(inplace=True)
    
    return df

### GENERATE HEXCOLOR FUNCTION###
def generate_hexcolors(df):
    rgb = lambda: f"rgb({random.randint(0,255)},{random.randint(0,255)},{random.randint(0,255)})"
    return [rgb() for _ in range(len(df['country'].unique()))]

### TRACE FUNCTION ###
def trace_bydate(df,date,country_colors):
    df_date = df[df['date'] == date].copy()


    ### TRACE USING plotly_graph_objects ###
    trace01 = go.Scatter(x = df_date['recovered'],
                    y = df_date['deaths'],
                    mode = 'markers+text',
                    text = df_date['country'],
                    marker = dict(color = country_colors,
                                    size = df_date['confirmed'] * 0.0015
                                    )
                    )
    data = [trace01]

    # Format Date
    parsed_date = datetime.strptime(str(date)[:10],"%Y-%m-%d")
    revised_date = datetime.strftime(parsed_date,"%B %-d, %Y")

    layout = go.Layout(title = f'COVID-19 Bubble Plot ({str(revised_date)})',
                    xaxis = dict(title='Recovered'),
                    yaxis = dict(title='Deaths'),
                    hovermode='closest',
                    )

    return go.Figure(data=data, layout=layout)